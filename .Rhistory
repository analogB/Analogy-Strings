install.packages("rjags")
w <- matrix(0,nrow=n,ncol=n)
x1 <- [1,1,1,1]
x2 <- [-1,-1,-1,-1]
n<-4
x1 <- c(1,1,1,1)
x2 <- c(-1,-1,-1,-1)
n<-4
w <- matrix(0,nrow=n,ncol=n)
View(w)
x<-matrix[0,nrow=m,ncol=n]
m<-2
n<-4
x<-matrix[0,nrow=m,ncol=n]
x[1,] <- c(1,1,1,1)
x[2,] <- c(-1,-1,-1,-1)
w <- matrix(0,nrow=n,ncol=n)
for (i in 1:n){
for (j in 1:n){
if (i==j) {w[i,j]<-0}
else w[i,j]<-sum(x[,i]*x[,j]
}}
m<-2
n<-4
x<-matrix[0,nrow=m,ncol=n]
x[1,] <- c(1,1,1,1)
x[2,] <- c(-1,-1,-1,-1)
w <- matrix(0,nrow=n,ncol=n)
for (i in 1:n){
for (j in 1:n){
if (i==j) {w[i,j]<-0}
else w[i,j]<-sum(x[,i]*x[,j])
}}
x<-matrix[0,nrow=m,ncol=n]
x<-matrix(0,nrow=m,ncol=n)
m<-2
n<-4
x<-matrix(0,nrow=m,ncol=n)
x[1,] <- c(1,1,1,1)
x[2,] <- c(-1,-1,-1,-1)
w <- matrix(0,nrow=n,ncol=n)
for (i in 1:n){
for (j in 1:n){
if (i==j) {w[i,j]<-0}
else w[i,j]<-sum(x[,i]*x[,j])
}}
View(w)
init <- c(1,1,1,-1)
for (i in 1:n){
for (j in 1:n){
E <- E -.5 * w[i,j] * state[i]*state[j])
}
}
E<-0
for (i in 1:n){
for (j in 1:n){
E <- E -.5 * w[i,j] * state[i]*state[j]
}}
state <- c(1,1,1,-1)
E<-0
for (i in 1:n){
for (j in 1:n){
E <- E -.5 * w[i,j] * state[i]*state[j]
}}
m<-2
n<-4
x<-matrix(0,nrow=m,ncol=n)
x[1,] <- c(1,1,1,1)
x[2,] <- c(-1,-1,-1,-1)
w <- matrix(0,nrow=n,ncol=n)
for (i in 1:n){
for (j in 1:n){
if (i==j) {w[i,j]<-0}
else w[i,j]<-sum(x[,i]*x[,j])
}}
state <- c(1,1,1,1)
E<-0
for (i in 1:n){
for (j in 1:n){
E <- E -.5 * w[i,j] * state[i]*state[j]
}}
?permutations
permutations <- function(n){
if(n==1){
return(matrix(1))
} else {
sp <- permutations(n-1)
p <- nrow(sp)
A <- matrix(nrow=n*p,ncol=n)
for(i in 1:n){
A[(i-1)*p+1:p,] <- cbind(i,sp+(sp>=i))
}
return(A)
}
}
permutations <- function(n){
if(n==1){
return(matrix(1))
} else {
sp <- permutations(n-1)
p <- nrow(sp)
A <- matrix(nrow=n*p,ncol=n)
for(i in 1:n){
A[(i-1)*p+1:p,] <- cbind(i,sp+(sp>=i))
}
return(A)
}
}
statespace <- permutations(n)
View(statespace)
install.packages("permute")
require("permute.R")
require("permute")
?combn
y<-c(1,-1)
statespace <- combn(y,n)
statespace <- combn(n,y)
statespace <- combn(y,4)
y
combn(letters[1:4], 2)
letters[1:2]
y
combn(y,2)
?permn
?permute
statespace <- permute(y,4)
statespace <- permute(n,y)
statespace <- permute(n,control=y)
statespace <- permute(n,control.complete=TRUE)
y<-c(1,-1)
state <- c(-1,-1,1,-1)
E<-0
for (i in 1:n){
for (j in 1:n){
E <- E -.5 * w[i,j] * state[i]*state[j]
}}
w
}}
m<-3
n<-4
x<-matrix(0,nrow=m,ncol=n)
x[1,] <- c(1,1,1,1)
x[2,] <- c(1,1,1,-1)
x[3,] <- c(1,1,-1,1)
w <- matrix(0,nrow=n,ncol=n)
for (i in 1:n){
for (j in 1:n){
if (i==j) {w[i,j]<-0}
else w[i,j]<-sum(x[,i]*x[,j])
}}
y<-c(1,-1)
state <- c(-1,-1,1,-1)
E<-0
for (i in 1:n){
for (j in 1:n){
E <- E -.5 * w[i,j] * state[i]*state[j]
}}
w
E
source('~/GitHub/Analogy-Strings/analysis.R')
setwd("~/GitHub/Analogy-Strings")
source('~/GitHub/Analogy-Strings/analysis.R')
source('~/GitHub/Analogy-Strings/analysis.R')
for (i in 1:maxSubjSubset){#maxSubjSubset
plotFilter<-(results$subjectID==i)
plotData <- results[plotFilter,]
density <- 1-0.9*length(i)/nSubject
plotName<- paste('participant',i)
#hist(mcmcMat[,paste('scale[',i,']',sep='')],main=paste(plotName,'scale'),breaks='sturges')
hist(mcmcMat[,paste('location[',i,']',sep='')],main=paste(plotName,'location'),breaks='sturges')
hist(mcmcMat[,paste('tau[',i,']',sep='')],main=paste(plotName,'tau'),breaks='sturges')
hist(mcmcMat[,paste('shape[',i,']',sep='')],main=paste(plotName,'shape'),breaks='sturges')
hist(mcmcMat[,paste('flipRate[',i,']',sep='')],main=paste(plotName, 'flip'),breaks=seq(0,1,0.05))
with(plotData,(plot  (jitter(rational,20), jitter(responseB,10),    pch=16,col=(rgb(0,0,0,density)),main=plotName)))
with(plotData,(points(jitter(rational,20), jitter(predicted*100,10),pch=16,col=(rgb(1,0,0,density)))))
}
##Separate Plots
#with(plotData,(plot  (jitter(rational,20), jitter(responseB,10),    pch=16,col=(rgb(0,0,0,density)))))
#with(plotData,(plot  (jitter(rational,20), jitter(predicted*100,10),pch=16,col=(rgb(1,0,0,density)))))
for (i in 1:maxSubjSubset){#maxSubjSubset
plotFilter<-(results$subjectID==i)
plotData <- results[plotFilter,]
density <- 1-0.9*length(i)/nSubject
plotName<- paste('participant',i)
#hist(mcmcMat[,paste('scale[',i,']',sep='')],main=paste(plotName,'scale'),breaks='sturges')
hist(mcmcMat[,paste('location[',i,']',sep='')],main=paste(plotName,'location'),breaks=seq(0,1,0.05))
hist(mcmcMat[,paste('tau[',i,']',sep='')],main=paste(plotName,'tau'),breaks='sturges')
hist(mcmcMat[,paste('shape[',i,']',sep='')],main=paste(plotName,'shape'),breaks='sturges')
hist(mcmcMat[,paste('flipRate[',i,']',sep='')],main=paste(plotName, 'flip'),breaks=seq(0,1,0.05))
with(plotData,(plot  (jitter(rational,20), jitter(responseB,10),    pch=16,col=(rgb(0,0,0,density)),main=plotName)))
with(plotData,(points(jitter(rational,20), jitter(predicted*100,10),pch=16,col=(rgb(1,0,0,density)))))
}
i<-2
plotFilter<-(results$subjectID==i)
plotData <- results[plotFilter,]
density <- 1-0.9*length(i)/nSubject
plotName<- paste('participant',i)
#hist(mcmcMat[,paste('scale[',i,']',sep='')],main=paste(plotName,'scale'),breaks='sturges')
hist(mcmcMat[,paste('location[',i,']',sep='')],main=paste(plotName,'location'),breaks=seq(0,1,0.05))
hist(mcmcMat[,paste('tau[',i,']',sep='')],main=paste(plotName,'tau'),breaks='sturges')
hist(mcmcMat[,paste('shape[',i,']',sep='')],main=paste(plotName,'shape'),breaks='sturges')
hist(mcmcMat[,paste('flipRate[',i,']',sep='')],main=paste(plotName, 'flip'),breaks=seq(0,1,0.05))
with(plotData,(plot  (jitter(rational,20), jitter(responseB,10),    pch=16,col=(rgb(0,0,0,density)),main=plotName)))
with(plotData,(points(jitter(rational,20), jitter(predicted*100
,10),pch=16,col=(rgb(1,0,0,density)))))
results<-data[jagsFilter,]
results$predicted<-colMeans(combined)[grep('predicted',names(combined))]
results$rawPredicted<-colMeans(combined)[grep('rawPredicted',names(combined))]
results$flipRate<-colMeans(combined)[grep('flipRate',names(combined))]
results$tau<-colMeans(combined)[grep('tau',names(combined))]
results$location<-colMeans(combined)[grep('tau',names(combined))]
results$shape<-colMeans(combined)[grep('shape',names(combined))]
with(results,hist(shape))
with(results,hist(shape,breaks=seq(0,50,1)))
with(results,hist(shape,breaks=seq(0,250,10)))
with(results,hist(shape,breaks=seq(0,250,1)))
with(results,hist(shape,breaks=seq(0,25,1)))
?hist
with(results,hist(shape,breaks=seq(0,25,1),xlim=range(breaks)))
with(results,hist(shape,breaks=seq(0,25,1),xlim=range(seq(0,25,1))))
with(results,hist(shape,breaks=seq(0,25,1),xlim=25))
with(results,hist(shape,breaks=seq(0,25,1),xlim=25,wanr.unused=FALSE))
with(results,hist(shape,breaks=seq(0,25,1),xlim=25,warn.unused=FALSE))
with(results,hist(shape,breaks=seq(0,25,1),xlim=25,warn.unused=FALSE))
with(results,hist(shape,breaks=sturges,xlim=25,warn.unused=FALSE))
with(results,hist(shape,breaks='sturges',xlim=25,warn.unused=FALSE))
?his
?hist
with(results,hist(shape,breaks='sturges',xlim=25,warn.unused=FALSE,right=FALSE))
with(results,hist(shape,breaks='sturges',warn.unused=FALSE,right=FALSE))
with(results,hist(shape,breaks=seq(0,25,1),warn.unused=FALSE,right=FALSE))
with(results[results$shape<25,],hist(shape,breaks=seq(0,25,1),right=FALSE))
with(results[results$shape<25,],hist(shape,breaks=seq(0,25,.5),right=FALSE))
with(results[results$shape<25,],hist(shape,breaks=seq(0,25,.25),right=FALSE))
with(results[results$shape<25,],hist(shape,breaks=seq(0,25,1),right=FALSE))
maxShape=25
with(results[results$shape<maxShape,],hist(shape,breaks=seq(0,maxShape,1),right=FALSE))
maxTau<-100
with(results[results$shape<maxTau,],hist(tau,breaks=seq(0,maxShape,1),right=FALSE))
maxTau<-100
with(results[results$tau<maxTau,],hist(tau,breaks=seq(0,maxShape,1),right=FALSE))
maxTau<-100
with(results[results$tau<=maxTau,],hist(tau,breaks=seq(0,maxShape,1),right=FALSE))
with(results[results$tau<=maxTau,],hist(tau,breaks=seq(0,maxTau,1),right=FALSE))
with(results[results$tau<=maxTau,],hist(tau,breaks=seq(0,maxTau,4),right=FALSE))
maxTau<-150
with(results[results$tau<=maxTau,],hist(tau,breaks=seq(0,maxTau,4),right=FALSE))
with(results[results$tau<=maxTau,],hist(tau,breaks=seq(0,maxTau,5),right=FALSE))
with(results[results$tau<=maxTau,],hist(tau,breaks=seq(0,maxTau,10),right=FALSE))
with(results[results$flipRate<=maxFlipRate,],hist(flipRate,breaks=seq(0,maxFlipRate,10),right=FALSE))
maxFlipRate<-150
with(results[results$flipRate<=maxFlipRate,],hist(flipRate,breaks=seq(0,maxFlipRate,10),right=FALSE))
with(results,hist(flipRate,breaks=seq(0,1,.05),right=FALSE))
with(results,hist(flipRate,breaks=seq(0,1,.05)))
with(results,hist(location,breaks=seq(0,1,.05)))
with(results,hist(location,breaks=seq(0,1,.05)))
results$location<-colMeans(combined)[grep('location',names(combined))]
with(results,hist(location,breaks=seq(0,1,.05)))
for (i in 1:maxSubjSubset){#maxSubjSubset
#i<-2
plotFilter<-(results$subjectID==i)
plotData <- results[plotFilter,]
density <- 1-0.9*length(i)/nSubject
plotName<- paste('participant',i)
#hist(mcmcMat[,paste('scale[',i,']',sep='')],main=paste(plotName,'scale'),breaks='sturges')
hist(mcmcMat[,paste('location[',i,']',sep='')],main=paste(plotName,'location'),breaks=seq(0,1,0.05))
hist(mcmcMat[,paste('tau[',i,']',sep='')],main=paste(plotName,'tau'),breaks='sturges')
hist(mcmcMat[,paste('shape[',i,']',sep='')],main=paste(plotName,'shape'),breaks='sturges')
hist(mcmcMat[,paste('flipRate[',i,']',sep='')],main=paste(plotName, 'flip'),breaks=seq(0,1,0.05))
with(plotData,(plot  (jitter(rational,20), jitter(responseB,10),    pch=16,col=(rgb(0,0,0,density)),main=plotName)))
with(plotData,(points(jitter(rational,20), jitter(predicted*100,10),pch=16,col=(rgb(1,0,0,density)))))
}
maxShape<-25
with(results[results$shape<=maxShape,],hist(shape,breaks=seq(0,maxShape,1)))
maxTau<-150
with(results[results$tau<=maxTau,],hist(tau,breaks=seq(0,maxTau,10)))
with(results,hist(flipRate,breaks=seq(0,1,.05)))
with(results,hist(location,breaks=seq(0,1,.05)))
for (i in 1:maxSubjSubset){#maxSubjSubset
#i<-2
plotFilter<-(results$subjectID==i)
plotData <- results[plotFilter,]
density <- 1-0.9*length(i)/nSubject
plotName<- paste('participant',i)
#hist(mcmcMat[,paste('scale[',i,']',sep='')],main=paste(plotName,'scale'),breaks='sturges')
# hist(mcmcMat[,paste('location[',i,']',sep='')],main=paste(plotName,'location'),breaks=seq(0,1,0.05))
# hist(mcmcMat[,paste('tau[',i,']',sep='')],main=paste(plotName,'tau'),breaks='sturges')
# hist(mcmcMat[,paste('shape[',i,']',sep='')],main=paste(plotName,'shape'),breaks='sturges')
# hist(mcmcMat[,paste('flipRate[',i,']',sep='')],main=paste(plotName, 'flip'),breaks=seq(0,1,0.05))
with(plotData,(plot  (jitter(rational,20), jitter(responseB,10),    pch=16,col=(rgb(0,0,0,density)),main=plotName)))
with(plotData,(points(jitter(rational,20), jitter(predicted*100,10),pch=16,col=(rgb(1,0,0,density)))))
}
maxShape<-25
with(results[results$shape<=maxShape,],hist(shape,breaks=seq(0,maxShape,1)))
maxTau<-150
with(results[results$tau<=maxTau,],hist(tau,breaks=seq(0,maxTau,10)))
with(results,hist(flipRate,breaks=seq(0,1,.05)))
with(results,hist(location,breaks=seq(0,1,.05)))
for (i in 1:maxSubjSubset){#maxSubjSubset
#i<-2
plotFilter<-(results$subjectID==i)
plotData <- results[plotFilter,]
density <- 1-0.9*length(i)/nSubject
plotName<- paste('participant',i)
#hist(mcmcMat[,paste('scale[',i,']',sep='')],main=paste(plotName,'scale'),breaks='sturges')
# hist(mcmcMat[,paste('location[',i,']',sep='')],main=paste(plotName,'location'),breaks=seq(0,1,0.05))
# hist(mcmcMat[,paste('tau[',i,']',sep='')],main=paste(plotName,'tau'),breaks='sturges')
# hist(mcmcMat[,paste('shape[',i,']',sep='')],main=paste(plotName,'shape'),breaks='sturges')
# hist(mcmcMat[,paste('flipRate[',i,']',sep='')],main=paste(plotName, 'flip'),breaks=seq(0,1,0.05))
with(plotData,(plot  (jitter(rational,10), jitter(responseB,10),    pch=16,col=(rgb(0,0,0,density)),main=plotName)))
with(plotData,(points(jitter(rational,10), jitter(predicted*100,10),pch=16,col=(rgb(1,0,0,density)))))
}
for (i in 1:maxSubjSubset){#maxSubjSubset
#i<-2
plotFilter<-(results$subjectID==i)
plotData <- results[plotFilter,]
density <- 1-0.9*length(i)/nSubject
plotName<- paste('participant',i)
#hist(mcmcMat[,paste('scale[',i,']',sep='')],main=paste(plotName,'scale'),breaks='sturges')
# hist(mcmcMat[,paste('location[',i,']',sep='')],main=paste(plotName,'location'),breaks=seq(0,1,0.05))
# hist(mcmcMat[,paste('tau[',i,']',sep='')],main=paste(plotName,'tau'),breaks='sturges')
# hist(mcmcMat[,paste('shape[',i,']',sep='')],main=paste(plotName,'shape'),breaks='sturges')
# hist(mcmcMat[,paste('flipRate[',i,']',sep='')],main=paste(plotName, 'flip'),breaks=seq(0,1,0.05))
with(plotData,(plot  (jitter(rational,2), jitter(responseB,1),    pch=16,col=(rgb(0,0,0,density)),main=plotName)))
with(plotData,(points(jitter(rational,2), jitter(predicted*100,1),pch=16,col=(rgb(1,0,0,density)))))
}
# 01-kmeans-app
palette(c("#E41A1C", "#377EB8", "#4DAF4A", "#984EA3",
"#FF7F00", "#FFFF33", "#A65628", "#F781BF", "#999999"))
library(shiny)
ui <- fluidPage(
headerPanel('Iris k-means clustering'),
sidebarPanel(
selectInput('xcol', 'X Variable', names(iris)),
selectInput('ycol', 'Y Variable', names(iris),
selected = names(iris)[[2]]),
numericInput('clusters', 'Cluster count', 3,
min = 1, max = 9)
),
mainPanel(
plotOutput('plot1')
)
)
server <- function(input, output) {
selectedData <- reactive({
iris[, c(input$xcol, input$ycol)]
})
clusters <- reactive({
kmeans(selectedData(), input$clusters)
})
output$plot1 <- renderPlot({
par(mar = c(5.1, 4.1, 0, 1))
plot(selectedData(),
col = clusters()$cluster,
pch = 20, cex = 3)
points(clusters()$centers, pch = 4, cex = 4, lwd = 4)
})
}
shinyApp(ui = ui, server = server)
install.packages("shiny")
source('~/Desktop/code/app.R')
# 01-kmeans-app
palette(c("#E41A1C", "#377EB8", "#4DAF4A", "#984EA3",
"#FF7F00", "#FFFF33", "#A65628", "#F781BF", "#999999"))
library(shiny)
ui <- fluidPage(
headerPanel('Iris k-means clustering'),
sidebarPanel(
selectInput('xcol', 'X Variable', names(iris)),
selectInput('ycol', 'Y Variable', names(iris),
selected = names(iris)[[2]]),
numericInput('clusters', 'Cluster count', 3,
min = 1, max = 9)
),
mainPanel(
plotOutput('plot1')
)
)
server <- function(input, output) {
selectedData <- reactive({
iris[, c(input$xcol, input$ycol)]
})
clusters <- reactive({
kmeans(selectedData(), input$clusters)
})
output$plot1 <- renderPlot({
par(mar = c(5.1, 4.1, 0, 1))
plot(selectedData(),
col = clusters()$cluster,
pch = 20, cex = 3)
points(clusters()$centers, pch = 4, cex = 4, lwd = 4)
})
}
shinyApp(ui = ui, server = server)
install.packages('rsconnect')
rsconnect::setAccountInfo(name='brogers',
token='14E563FB22A3028062F79A84656C3887',
secret='<SECRET>')
install.packages('rsconnect')
